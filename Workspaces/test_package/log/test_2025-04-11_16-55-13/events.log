[0.000000] (-) TimerEvent: {}
[0.000332] (test_package) JobQueued: {'identifier': 'test_package', 'dependencies': OrderedDict([('test_package', '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/install/test_package')])}
[0.000564] (test_package) JobStarted: {'identifier': 'test_package'}
[0.034973] (test_package) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package', 'env': OrderedDict([('USER', 'haniel'), ('LC_TIME', 'es_MX.UTF-8'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/haniel'), ('OLDPWD', '/home/haniel/Projects/ROS-Mobile/Workspaces'), ('LESS', '-R'), ('DESKTOP_SESSION', 'ubuntu'), ('ZSH', '/home/haniel/.oh-my-zsh'), ('LSCOLORS', 'Gxfxcxdxbxegedabagacad'), ('GTK_MODULES', 'gail:atk-bridge'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('PAGER', 'less'), ('ROS_PYTHON_VERSION', '3'), ('LC_MONETARY', 'es_MX.UTF-8'), ('SYSTEMD_EXEC_PID', '3906'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'haniel'), ('_', '/usr/bin/colcon'), ('XDG_SESSION_CLASS', 'user'), ('ROS_VERSION', '2'), ('USERNAME', 'haniel'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/opt/ros/humble/bin:/home/haniel/.cabal/bin:/home/haniel/.ghcup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/HanielUlises:@/tmp/.ICE-unix/3883,unix/HanielUlises:/tmp/.ICE-unix/3883'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/8189f2ec_d949_4960_8141_1c8403bc3371'), ('XDG_MENU_PREFIX', 'gnome-'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('LC_ADDRESS', 'es_MX.UTF-8'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'es_MX.UTF-8'), ('GNOME_TERMINAL_SERVICE', ':1.702'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XMODIFIERS', '@im=ibus'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('AMENT_PREFIX_PATH', '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/install/test_package:/opt/ros/humble'), ('SHELL', '/usr/bin/zsh'), ('LC_NAME', 'es_MX.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LC_MEASUREMENT', 'es_MX.UTF-8'), ('LC_IDENTIFICATION', 'es_MX.UTF-8'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('LC_NUMERIC', 'es_MX.UTF-8'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_PAPER', 'es_MX.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/install/test_package')]), 'shell': False}
[0.043264] (test_package) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/CTestConfiguration.ini\n'}
[0.043520] (test_package) StdoutLine: {'line': b'Parse Config file:/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/CTestConfiguration.ini\n'}
[0.043592] (test_package) StdoutLine: {'line': b'   Site: HanielUlises\n'}
[0.043652] (test_package) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.043708] (test_package) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.043783] (test_package) StdoutLine: {'line': b'Create new tag: 20250411-2255 - Experimental\n'}
[0.043869] (test_package) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/CTestConfiguration.ini\n'}
[0.043926] (test_package) StdoutLine: {'line': b'Parse Config file:/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/CTestConfiguration.ini\n'}
[0.043982] (test_package) StdoutLine: {'line': b'Test project /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package\n'}
[0.044036] (test_package) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.044106] (test_package) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.044195] (test_package) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.044248] (test_package) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.044298] (test_package) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.044351] (test_package) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.044425] (test_package) StdoutLine: {'line': b'test 1\n'}
[0.044472] (test_package) StdoutLine: {'line': b'    Start 1: cppcheck\n'}
[0.044519] (test_package) StdoutLine: {'line': b'\n'}
[0.044566] (test_package) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/cppcheck.xunit.xml" "--package-name" "test_package" "--output-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/cppcheck.xunit.xml"\n'}
[0.044618] (test_package) StdoutLine: {'line': b'1: Test timeout computed to be: 300\n'}
[0.094599] (test_package) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package':\n"}
[0.094738] (test_package) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/cppcheck.xunit.xml\n'}
[0.099795] (-) TimerEvent: {}
[0.170458] (test_package) StdoutLine: {'line': b'1: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.\n'}
[0.181708] (test_package) StdoutLine: {'line': b'1: -- run_test.py: return code 0\n'}
[0.181999] (test_package) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/cppcheck.xunit.xml'\n"}
[0.191174] (test_package) StdoutLine: {'line': b'1/4 Test #1: cppcheck .........................   Passed    0.15 sec\n'}
[0.191630] (test_package) StdoutLine: {'line': b'test 2\n'}
[0.191726] (test_package) StdoutLine: {'line': b'    Start 2: lint_cmake\n'}
[0.191826] (test_package) StdoutLine: {'line': b'\n'}
[0.191931] (test_package) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/lint_cmake.xunit.xml" "--package-name" "test_package" "--output-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/lint_cmake.xunit.xml"\n'}
[0.192060] (test_package) StdoutLine: {'line': b'2: Test timeout computed to be: 60\n'}
[0.199883] (-) TimerEvent: {}
[0.244560] (test_package) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package':\n"}
[0.244749] (test_package) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/lint_cmake.xunit.xml\n'}
[0.299979] (-) TimerEvent: {}
[0.322010] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:1: Line ends in whitespace [whitespace/eol]\n'}
[0.322317] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:4: Line ends in whitespace [whitespace/eol]\n'}
[0.322434] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:5: Line ends in whitespace [whitespace/eol]\n'}
[0.322541] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:7: Lines should be <= 140 characters long [linelength]\n'}
[0.322635] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:8: Lines should be <= 140 characters long [linelength]\n'}
[0.322726] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:9: Lines should be <= 140 characters long [linelength]\n'}
[0.322816] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:10: Lines should be <= 140 characters long [linelength]\n'}
[0.322905] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:11: Lines should be <= 140 characters long [linelength]\n'}
[0.322997] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:12: Lines should be <= 140 characters long [linelength]\n'}
[0.323092] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:13: Lines should be <= 140 characters long [linelength]\n'}
[0.323197] (test_package) StdoutLine: {'line': b'2: build/test_package/CTestTestfile.cmake:14: Lines should be <= 140 characters long [linelength]\n'}
[0.323286] (test_package) StdoutLine: {'line': b'2: \n'}
[0.323386] (test_package) StdoutLine: {'line': b'2: build/test_package/cmake_install.cmake:13: Weird indentation; use 2 spaces [whitespace/indent]\n'}
[0.323481] (test_package) StdoutLine: {'line': b'2: build/test_package/cmake_install.cmake:46: Lines should be <= 140 characters long [linelength]\n'}
[0.323571] (test_package) StdoutLine: {'line': b'2: build/test_package/cmake_install.cmake:56: Weird indentation; use 2 spaces [whitespace/indent]\n'}
[0.323662] (test_package) StdoutLine: {'line': b'2: build/test_package/cmake_install.cmake:58: Weird indentation; use 2 spaces [whitespace/indent]\n'}
[0.323751] (test_package) StdoutLine: {'line': b'2: \n'}
[0.323849] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/Makefile.cmake:8: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.323939] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/Makefile.cmake:267: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.324033] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/Makefile.cmake:273: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.324142] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/Makefile.cmake:302: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.324235] (test_package) StdoutLine: {'line': b'2: \n'}
[0.324325] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCCompiler.cmake:9: Lines should be <= 140 characters long [linelength]\n'}
[0.324430] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCCompiler.cmake:69: Lines should be <= 140 characters long [linelength]\n'}
[0.324528] (test_package) StdoutLine: {'line': b'2: \n'}
[0.324618] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:9: Lines should be <= 140 characters long [linelength]\n'}
[0.324710] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:11: Lines should be <= 140 characters long [linelength]\n'}
[0.324801] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:12: Lines should be <= 140 characters long [linelength]\n'}
[0.324892] (test_package) StdoutLine: {'line': b"2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:42: Extra spaces between 'foreach' and its () [whitespace/extra]\n"}
[0.324986] (test_package) StdoutLine: {'line': b"2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:43: Extra spaces between 'if' and its () [whitespace/extra]\n"}
[0.325080] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/3.22.1/CMakeCXXCompiler.cmake:80: Lines should be <= 140 characters long [linelength]\n'}
[0.325268] (test_package) StdoutLine: {'line': b'2: \n'}
[0.325363] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/test_package_uninstall.dir/DependInfo.cmake:6: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.325464] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/test_package_uninstall.dir/DependInfo.cmake:10: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.325555] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/test_package_uninstall.dir/DependInfo.cmake:14: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.325644] (test_package) StdoutLine: {'line': b'2: \n'}
[0.325734] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/test_package_uninstall.dir/cmake_clean.cmake:6: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.325823] (test_package) StdoutLine: {'line': b'2: \n'}
[0.325913] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/uninstall.dir/DependInfo.cmake:6: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326009] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/uninstall.dir/DependInfo.cmake:10: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326119] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/uninstall.dir/DependInfo.cmake:14: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326208] (test_package) StdoutLine: {'line': b'2: \n'}
[0.326293] (test_package) StdoutLine: {'line': b'2: build/test_package/CMakeFiles/uninstall.dir/cmake_clean.cmake:3: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326399] (test_package) StdoutLine: {'line': b'2: \n'}
[0.326490] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:4: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326585] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:6: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326673] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:7: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326762] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:8: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326850] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:10: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.326937] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_core/package.cmake:11: Mismatching spaces inside () after command [whitespace/mismatch]\n'}
[0.327024] (test_package) StdoutLine: {'line': b'2: \n'}
[0.327111] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:1: Lines should be <= 140 characters long [linelength]\n'}
[0.327215] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:2: Lines should be <= 140 characters long [linelength]\n'}
[0.327303] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:4: Lines should be <= 140 characters long [linelength]\n'}
[0.327411] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:5: Lines should be <= 140 characters long [linelength]\n'}
[0.327501] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:6: Lines should be <= 140 characters long [linelength]\n'}
[0.327586] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:8: Lines should be <= 140 characters long [linelength]\n'}
[0.327672] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:9: Lines should be <= 140 characters long [linelength]\n'}
[0.327759] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:10: Lines should be <= 140 characters long [linelength]\n'}
[0.327846] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:11: Lines should be <= 140 characters long [linelength]\n'}
[0.327932] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:12: Lines should be <= 140 characters long [linelength]\n'}
[0.328016] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:13: Lines should be <= 140 characters long [linelength]\n'}
[0.328102] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_package_templates/templates.cmake:14: Lines should be <= 140 characters long [linelength]\n'}
[0.328187] (test_package) StdoutLine: {'line': b'2: \n'}
[0.328271] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:313: Lines should be <= 140 characters long [linelength]\n'}
[0.328362] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:314: Lines should be <= 140 characters long [linelength]\n'}
[0.328462] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:316: Lines should be <= 140 characters long [linelength]\n'}
[0.328559] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:317: Lines should be <= 140 characters long [linelength]\n'}
[0.328649] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:319: Lines should be <= 140 characters long [linelength]\n'}
[0.328743] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:320: Lines should be <= 140 characters long [linelength]\n'}
[0.328829] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:322: Lines should be <= 140 characters long [linelength]\n'}
[0.328916] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:323: Lines should be <= 140 characters long [linelength]\n'}
[0.329000] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:325: Lines should be <= 140 characters long [linelength]\n'}
[0.329087] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:326: Lines should be <= 140 characters long [linelength]\n'}
[0.329189] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:328: Lines should be <= 140 characters long [linelength]\n'}
[0.329280] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:329: Lines should be <= 140 characters long [linelength]\n'}
[0.329372] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:331: Lines should be <= 140 characters long [linelength]\n'}
[0.329461] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:332: Lines should be <= 140 characters long [linelength]\n'}
[0.329544] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:334: Lines should be <= 140 characters long [linelength]\n'}
[0.329628] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:335: Lines should be <= 140 characters long [linelength]\n'}
[0.329709] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:337: Lines should be <= 140 characters long [linelength]\n'}
[0.329792] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:338: Lines should be <= 140 characters long [linelength]\n'}
[0.329875] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:340: Lines should be <= 140 characters long [linelength]\n'}
[0.329957] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:341: Lines should be <= 140 characters long [linelength]\n'}
[0.330060] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:343: Lines should be <= 140 characters long [linelength]\n'}
[0.330156] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:344: Lines should be <= 140 characters long [linelength]\n'}
[0.330245] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:346: Lines should be <= 140 characters long [linelength]\n'}
[0.330330] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:347: Lines should be <= 140 characters long [linelength]\n'}
[0.330427] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:349: Lines should be <= 140 characters long [linelength]\n'}
[0.330514] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:350: Lines should be <= 140 characters long [linelength]\n'}
[0.330604] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_symlink_install/ament_cmake_symlink_install.cmake:353: Lines should be <= 140 characters long [linelength]\n'}
[0.330690] (test_package) StdoutLine: {'line': b'2: \n'}
[0.330773] (test_package) StdoutLine: {'line': b'2: build/test_package/ament_cmake_uninstall_target/ament_cmake_uninstall_target.cmake:60: Lines should be <= 140 characters long [linelength]\n'}
[0.330859] (test_package) StdoutLine: {'line': b'2: \n'}
[0.330944] (test_package) StdoutLine: {'line': b'2: \n'}
[0.331030] (test_package) StdoutLine: {'line': b'2: 81 errors\n'}
[0.334083] (test_package) StdoutLine: {'line': b'2: -- run_test.py: return code 1\n'}
[0.334235] (test_package) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/lint_cmake.xunit.xml'\n"}
[0.343588] (test_package) StdoutLine: {'line': b'2/4 Test #2: lint_cmake .......................***Failed    0.15 sec\n'}
[0.343864] (test_package) StdoutLine: {'line': b'test 3\n'}
[0.343964] (test_package) StdoutLine: {'line': b'    Start 3: uncrustify\n'}
[0.344059] (test_package) StdoutLine: {'line': b'\n'}
[0.344185] (test_package) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/uncrustify.xunit.xml" "--package-name" "test_package" "--output-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/uncrustify.xunit.xml"\n'}
[0.344294] (test_package) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[0.400099] (-) TimerEvent: {}
[0.400378] (test_package) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package':\n"}
[0.400529] (test_package) StdoutLine: {'line': b'3:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/uncrustify.xunit.xml\n'}
[0.500203] (-) TimerEvent: {}
[0.568329] (test_package) StdoutLine: {'line': b"3: Code style divergence in file 'build/test_package/CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c':\n"}
[0.568608] (test_package) StdoutLine: {'line': b'3: \n'}
[0.568747] (test_package) StdoutLine: {'line': b'3: --- build/test_package/CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c\n'}
[0.568842] (test_package) StdoutLine: {'line': b'3: +++ build/test_package/CMakeFiles/3.22.1/CompilerIdC/CMakeCCompilerId.c.uncrustify\n'}
[0.568926] (test_package) StdoutLine: {'line': b'3: @@ -32 +32 @@\n'}
[0.570061] (test_package) StdoutLine: {'line': b'3: -  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,\n'}
[0.570187] (test_package) StdoutLine: {'line': b'3: +/* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,\n'}
[0.570268] (test_package) StdoutLine: {'line': b'3: @@ -35,2 +35,2 @@\n'}
[0.570376] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)\n'}
[0.570483] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)\n'}
[0.570561] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER / 100)\n'}
[0.570639] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER / 10 % 10)\n'}
[0.570717] (test_package) StdoutLine: {'line': b'3: @@ -40 +40 @@\n'}
[0.570794] (test_package) StdoutLine: {'line': b'3: -#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)\n'}
[0.570872] (test_package) StdoutLine: {'line': b'3: +#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER % 10)\n'}
[0.570958] (test_package) StdoutLine: {'line': b'3: @@ -45 +45 @@\n'}
[0.571036] (test_package) StdoutLine: {'line': b'3: -   /* The third version component from --version is an update index,\n'}
[0.571113] (test_package) StdoutLine: {'line': b'3: +/* The third version component from --version is an update index,\n'}
[0.571189] (test_package) StdoutLine: {'line': b'3: @@ -50 +50 @@\n'}
[0.571265] (test_package) StdoutLine: {'line': b'3: -   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */\n'}
[0.571371] (test_package) StdoutLine: {'line': b'3: +/* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */\n'}
[0.571473] (test_package) StdoutLine: {'line': b'3: @@ -54 +54 @@\n'}
[0.571552] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.571630] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.571706] (test_package) StdoutLine: {'line': b'3: @@ -83,3 +83,3 @@\n'}
[0.571781] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)\n'}
[0.571858] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)\n'}
[0.571933] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)\n'}
[0.572041] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER / 100)\n'}
[0.572122] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER / 10 % 10)\n'}
[0.572203] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER % 10)\n'}
[0.572282] (test_package) StdoutLine: {'line': b'3: @@ -87,3 +87,3 @@\n'}
[0.572368] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)\n'}
[0.572468] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)\n'}
[0.572556] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)\n'}
[0.572633] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER / 10000)\n'}
[0.572710] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER / 100 % 100)\n'}
[0.572787] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER % 100)\n'}
[0.572864] (test_package) StdoutLine: {'line': b'3: @@ -92 +92 @@\n'}
[0.572941] (test_package) StdoutLine: {'line': b'3: -  /* _MSC_VER = VVRR */\n'}
[0.573044] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.573124] (test_package) StdoutLine: {'line': b'3: @@ -118,3 +118,3 @@\n'}
[0.573203] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)\n'}
[0.573284] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)\n'}
[0.573373] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)\n'}
[0.573472] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__ >> 24 & 0x00FF)\n'}
[0.573548] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__ >> 16 & 0x00FF)\n'}
[0.573625] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__ & 0xFFFF)\n'}
[0.573724] (test_package) StdoutLine: {'line': b'3: @@ -124,2 +124,2 @@\n'}
[0.573808] (test_package) StdoutLine: {'line': b'3: -  /* __BORLANDC__ = 0xVRR */\n'}
[0.573892] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)\n'}
[0.573974] (test_package) StdoutLine: {'line': b'3: +/* __BORLANDC__ = 0xVRR */\n'}
[0.574055] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__ >> 8)\n'}
[0.574138] (test_package) StdoutLine: {'line': b'3: @@ -130 +130 @@\n'}
[0.574228] (test_package) StdoutLine: {'line': b'3: -   /* __WATCOMC__ = VVRR */\n'}
[0.574309] (test_package) StdoutLine: {'line': b'3: +/* __WATCOMC__ = VVRR */\n'}
[0.574418] (test_package) StdoutLine: {'line': b'3: @@ -139 +139 @@\n'}
[0.574572] (test_package) StdoutLine: {'line': b'3: -   /* __WATCOMC__ = VVRP + 1100 */\n'}
[0.574674] (test_package) StdoutLine: {'line': b'3: +/* __WATCOMC__ = VVRP + 1100 */\n'}
[0.574753] (test_package) StdoutLine: {'line': b'3: @@ -149,4 +149,4 @@\n'}
[0.574830] (test_package) StdoutLine: {'line': b'3: -   /* __SUNPRO_C = 0xVRRP */\n'}
[0.574908] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)\n'}
[0.574986] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)\n'}
[0.575064] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)\n'}
[0.575141] (test_package) StdoutLine: {'line': b'3: +/* __SUNPRO_C = 0xVRRP */\n'}
[0.575217] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C >> 12)\n'}
[0.575296] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C >> 4 & 0xFF)\n'}
[0.575409] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C & 0xF)\n'}
[0.575530] (test_package) StdoutLine: {'line': b'3: @@ -154,4 +154,4 @@\n'}
[0.575625] (test_package) StdoutLine: {'line': b'3: -   /* __SUNPRO_CC = 0xVRP */\n'}
[0.575702] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)\n'}
[0.575788] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)\n'}
[0.575869] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)\n'}
[0.575947] (test_package) StdoutLine: {'line': b'3: +/* __SUNPRO_CC = 0xVRP */\n'}
[0.576071] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C >> 8)\n'}
[0.576160] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C >> 4 & 0xF)\n'}
[0.576245] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C & 0xF)\n'}
[0.576331] (test_package) StdoutLine: {'line': b'3: @@ -162,4 +162,4 @@\n'}
[0.576441] (test_package) StdoutLine: {'line': b'3: -  /* __HP_cc = VVRRPP */\n'}
[0.576521] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)\n'}
[0.576597] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)\n'}
[0.576676] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)\n'}
[0.576774] (test_package) StdoutLine: {'line': b'3: +/* __HP_cc = VVRRPP */\n'}
[0.576857] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__HP_cc / 10000)\n'}
[0.576934] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__HP_cc / 100 % 100)\n'}
[0.577012] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__HP_cc % 100)\n'}
[0.577109] (test_package) StdoutLine: {'line': b'3: @@ -169,4 +169,4 @@\n'}
[0.577189] (test_package) StdoutLine: {'line': b'3: -  /* __DECC_VER = VVRRTPPPP */\n'}
[0.577269] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)\n'}
[0.577353] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)\n'}
[0.577443] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)\n'}
[0.577523] (test_package) StdoutLine: {'line': b'3: +/* __DECC_VER = VVRRTPPPP */\n'}
[0.577603] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__DECC_VER / 10000000)\n'}
[0.577682] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__DECC_VER / 100000 % 100)\n'}
[0.577762] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__DECC_VER % 10000)\n'}
[0.577850] (test_package) StdoutLine: {'line': b'3: @@ -176,4 +176,4 @@\n'}
[0.577930] (test_package) StdoutLine: {'line': b'3: -  /* __IBMC__ = VRP */\n'}
[0.578010] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)\n'}
[0.578107] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)\n'}
[0.578191] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)\n'}
[0.578273] (test_package) StdoutLine: {'line': b'3: +/* __IBMC__ = VRP */\n'}
[0.578362] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMC__ / 100)\n'}
[0.578455] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMC__ / 10 % 10)\n'}
[0.578539] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMC__ % 10)\n'}
[0.578665] (test_package) StdoutLine: {'line': b'3: @@ -191,4 +191,4 @@\n'}
[0.578774] (test_package) StdoutLine: {'line': b'3: -  /* __IBMC__ = VRP */\n'}
[0.578858] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)\n'}
[0.578941] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)\n'}
[0.579025] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)\n'}
[0.579110] (test_package) StdoutLine: {'line': b'3: +/* __IBMC__ = VRP */\n'}
[0.579193] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMC__ / 100)\n'}
[0.579276] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMC__ / 10 % 10)\n'}
[0.579366] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMC__ % 10)\n'}
[0.579463] (test_package) StdoutLine: {'line': b'3: @@ -198,4 +198,4 @@\n'}
[0.579547] (test_package) StdoutLine: {'line': b'3: -  /* __IBMC__ = VRP */\n'}
[0.579631] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)\n'}
[0.579716] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)\n'}
[0.579799] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)\n'}
[0.579882] (test_package) StdoutLine: {'line': b'3: +/* __IBMC__ = VRP */\n'}
[0.579987] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMC__ / 100)\n'}
[0.580091] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMC__ / 10 % 10)\n'}
[0.580179] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMC__ % 10)\n'}
[0.580266] (test_package) StdoutLine: {'line': b'3: @@ -226,4 +226,4 @@\n'}
[0.580358] (test_package) StdoutLine: {'line': b'3: -  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */\n'}
[0.580455] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)\n'}
[0.580554] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)\n'}
[0.580643] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)\n'}
[0.580747] (test_package) StdoutLine: {'line': b'3: +/* __TI_COMPILER_VERSION__ = VVVRRRPPP */\n'}
[0.580856] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__ / 1000000)\n'}
[0.580946] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__ / 1000 % 1000)\n'}
[0.581034] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__ % 1000)\n'}
[0.581142] (test_package) StdoutLine: {'line': b'3: @@ -261 +261 @@\n'}
[0.581231] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)\n'}
[0.581321] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER % 10)\n'}
[0.581426] (test_package) StdoutLine: {'line': b'3: @@ -276,4 +276,4 @@\n'}
[0.581526] (test_package) StdoutLine: {'line': b'3: -  /* __ARMCC_VERSION = VRRPPPP */\n'}
[0.581617] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)\n'}
[0.581709] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)\n'}
[0.581798] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)\n'}
[0.581893] (test_package) StdoutLine: {'line': b'3: +/* __ARMCC_VERSION = VRRPPPP */\n'}
[0.581982] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION / 1000000)\n'}
[0.582072] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION / 10000 % 100)\n'}
[0.582161] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION % 10000)\n'}
[0.582249] (test_package) StdoutLine: {'line': b'3: @@ -281,4 +281,4 @@\n'}
[0.582337] (test_package) StdoutLine: {'line': b'3: -  /* __ARMCC_VERSION = VRPPPP */\n'}
[0.582442] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)\n'}
[0.582531] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)\n'}
[0.582619] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)\n'}
[0.582707] (test_package) StdoutLine: {'line': b'3: +/* __ARMCC_VERSION = VRPPPP */\n'}
[0.582796] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION / 100000)\n'}
[0.582885] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION / 10000 % 10)\n'}
[0.582974] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION % 10000)\n'}
[0.583061] (test_package) StdoutLine: {'line': b'3: @@ -297 +297 @@\n'}
[0.583155] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.583243] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.583333] (test_package) StdoutLine: {'line': b'3: @@ -305,3 +305,3 @@\n'}
[0.583433] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)\n'}
[0.583523] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)\n'}
[0.583613] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)\n'}
[0.583701] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION / 1000000)\n'}
[0.583789] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION / 10000 % 100)\n'}
[0.583881] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION % 10000)\n'}
[0.583970] (test_package) StdoutLine: {'line': b'3: @@ -319 +319 @@\n'}
[0.584060] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.584169] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.584262] (test_package) StdoutLine: {'line': b'3: @@ -336 +336 @@\n'}
[0.584358] (test_package) StdoutLine: {'line': b'3: -  /* _MSC_VER = VVRR */\n'}
[0.584458] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.584550] (test_package) StdoutLine: {'line': b'3: @@ -341 +341 @@\n'}
[0.584647] (test_package) StdoutLine: {'line': b'3: -    /* _MSC_FULL_VER = VVRRPPPPP */\n'}
[0.584749] (test_package) StdoutLine: {'line': b'3: +/* _MSC_FULL_VER = VVRRPPPPP */\n'}
[0.584842] (test_package) StdoutLine: {'line': b'3: @@ -344 +344 @@\n'}
[0.584935] (test_package) StdoutLine: {'line': b'3: -    /* _MSC_FULL_VER = VVRRPPPP */\n'}
[0.585030] (test_package) StdoutLine: {'line': b'3: +/* _MSC_FULL_VER = VVRRPPPP */\n'}
[0.585144] (test_package) StdoutLine: {'line': b'3: @@ -352 +352,2 @@\n'}
[0.585239] (test_package) StdoutLine: {'line': b'3: -#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)\n'}
[0.585461] (test_package) StdoutLine: {'line': b'3: +#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || \\\n'}
[0.585561] (test_package) StdoutLine: {'line': b'3: +  defined(__ADSP21000__)\n'}
[0.585655] (test_package) StdoutLine: {'line': b'3: @@ -355,4 +356,4 @@\n'}
[0.585750] (test_package) StdoutLine: {'line': b'3: -  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */\n'}
[0.585844] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)\n'}
[0.585941] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)\n'}
[0.586035] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)\n'}
[0.586129] (test_package) StdoutLine: {'line': b'3: +/* __VISUALDSPVERSION__ = 0xVVRRPP00 */\n'}
[0.586223] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__ >> 24)\n'}
[0.586316] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__ >> 16 & 0xFF)\n'}
[0.586423] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__ >> 8 & 0xFF)\n'}
[0.586520] (test_package) StdoutLine: {'line': b'3: @@ -368 +369,3 @@\n'}
[0.586613] (test_package) StdoutLine: {'line': b'3: -# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))\n'}
[0.586715] (test_package) StdoutLine: {'line': b'3: +# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || \\\n'}
[0.586810] (test_package) StdoutLine: {'line': b'3: +  defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || \\\n'}
[0.586920] (test_package) StdoutLine: {'line': b'3: +  defined(__ICC8051__) || defined(__ICCSTM8__))\n'}
[0.587017] (test_package) StdoutLine: {'line': b'3: @@ -370 +373 @@\n'}
[0.587110] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))\n'}
[0.587204] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR DEC((__VER__) -(((__VER__) / 100) * 100))\n'}
[0.587298] (test_package) StdoutLine: {'line': b'3: @@ -382,4 +385,4 @@\n'}
[0.587404] (test_package) StdoutLine: {'line': b'3: -  /* SDCC = VRP */\n'}
[0.587503] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)\n'}
[0.587598] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)\n'}
[0.587692] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)\n'}
[0.587786] (test_package) StdoutLine: {'line': b'3: +/* SDCC = VRP */\n'}
[0.587880] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR DEC(SDCC / 100)\n'}
[0.587972] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR DEC(SDCC / 10 % 10)\n'}
[0.588081] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_PATCH DEC(SDCC % 10)\n'}
[0.588187] (test_package) StdoutLine: {'line': b'3: @@ -403 +406 @@\n'}
[0.588286] (test_package) StdoutLine: {'line': b'3: -char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";\n'}
[0.588475] (test_package) StdoutLine: {'line': b'3: +char const * info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";\n'}
[0.588599] (test_package) StdoutLine: {'line': b'3: @@ -405 +408 @@\n'}
[0.588696] (test_package) StdoutLine: {'line': b'3: -char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";\n'}
[0.588792] (test_package) StdoutLine: {'line': b'3: +char const * info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";\n'}
[0.588888] (test_package) StdoutLine: {'line': b'3: @@ -409 +412 @@\n'}
[0.589003] (test_package) StdoutLine: {'line': b'3: -char const* qnxnto = "INFO" ":" "qnxnto[]";\n'}
[0.589100] (test_package) StdoutLine: {'line': b'3: +char const * qnxnto = "INFO" ":" "qnxnto[]";\n'}
[0.589198] (test_package) StdoutLine: {'line': b'3: @@ -413 +416 @@\n'}
[0.589293] (test_package) StdoutLine: {'line': b'3: -char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";\n'}
[0.589403] (test_package) StdoutLine: {'line': b'3: +char const * info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";\n'}
[0.589505] (test_package) StdoutLine: {'line': b'3: @@ -656,9 +659,9 @@\n'}
[0.589601] (test_package) StdoutLine: {'line': b'3: -#define DEC(n)                   \\\n'}
[0.589697] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10000000)%10)), \\\n"}
[0.589793] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 1000000)%10)),  \\\n"}
[0.589889] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 100000)%10)),   \\\n"}
[0.589985] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10000)%10)),    \\\n"}
[0.590081] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 1000)%10)),     \\\n"}
[0.590176] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 100)%10)),      \\\n"}
[0.590271] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10)%10)),       \\\n"}
[0.590374] (test_package) StdoutLine: {'line': b"3: -  ('0' +  ((n) % 10))\n"}
[0.590478] (test_package) StdoutLine: {'line': b'3: +#define DEC(n) \\\n'}
[0.590578] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10000000) % 10)), \\\n"}
[0.590675] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 1000000) % 10)), \\\n"}
[0.590775] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 100000) % 10)), \\\n"}
[0.590871] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10000) % 10)), \\\n"}
[0.590966] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 1000) % 10)), \\\n"}
[0.591063] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 100) % 10)), \\\n"}
[0.591159] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10) % 10)), \\\n"}
[0.591256] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) % 10))\n"}
[0.591356] (test_package) StdoutLine: {'line': b'3: @@ -667,9 +670,9 @@\n'}
[0.591462] (test_package) StdoutLine: {'line': b'3: -#define HEX(n)             \\\n'}
[0.591562] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>28 & 0xF)), \\\n"}
[0.591659] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>24 & 0xF)), \\\n"}
[0.591756] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>20 & 0xF)), \\\n"}
[0.591851] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>16 & 0xF)), \\\n"}
[0.591947] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>12 & 0xF)), \\\n"}
[0.592043] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>8  & 0xF)), \\\n"}
[0.592168] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>4  & 0xF)), \\\n"}
[0.592267] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)     & 0xF))\n"}
[0.592377] (test_package) StdoutLine: {'line': b'3: +#define HEX(n) \\\n'}
[0.592485] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 28 & 0xF)), \\\n"}
[0.592585] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 24 & 0xF)), \\\n"}
[0.592686] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 20 & 0xF)), \\\n"}
[0.592785] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 16 & 0xF)), \\\n"}
[0.592885] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 12 & 0xF)), \\\n"}
[0.592988] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 8 & 0xF)), \\\n"}
[0.593104] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 4 & 0xF)), \\\n"}
[0.593202] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) & 0xF))\n"}
[0.593297] (test_package) StdoutLine: {'line': b'3: @@ -679 +682 @@\n'}
[0.593409] (test_package) StdoutLine: {'line': b'3: -char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";\n'}
[0.593511] (test_package) StdoutLine: {'line': b'3: +char const * info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";\n'}
[0.593618] (test_package) StdoutLine: {'line': b'3: @@ -685 +688 @@\n'}
[0.593714] (test_package) StdoutLine: {'line': b"3: -  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',\n"}
[0.593810] (test_package) StdoutLine: {'line': b"3: +  'c', 'o', 'm', 'p', 'i', 'l', 'e', 'r', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[',\n"}
[0.593906] (test_package) StdoutLine: {'line': b'3: @@ -690 +693 @@\n'}
[0.594005] (test_package) StdoutLine: {'line': b"3: -   '.', COMPILER_VERSION_PATCH,\n"}
[0.594120] (test_package) StdoutLine: {'line': b"3: +  '.', COMPILER_VERSION_PATCH,\n"}
[0.594219] (test_package) StdoutLine: {'line': b'3: @@ -692 +695 @@\n'}
[0.594318] (test_package) StdoutLine: {'line': b"3: -    '.', COMPILER_VERSION_TWEAK,\n"}
[0.594428] (test_package) StdoutLine: {'line': b"3: +  '.', COMPILER_VERSION_TWEAK,\n"}
[0.594531] (test_package) StdoutLine: {'line': b'3: @@ -696 +699,2 @@\n'}
[0.594628] (test_package) StdoutLine: {'line': b"3: -  ']','\\0'};\n"}
[0.594729] (test_package) StdoutLine: {'line': b"3: +  ']', '\\0'\n"}
[0.594837] (test_package) StdoutLine: {'line': b'3: +};\n'}
[0.594936] (test_package) StdoutLine: {'line': b'3: @@ -703,3 +707,4 @@\n'}
[0.595039] (test_package) StdoutLine: {'line': b"3: -  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',\n"}
[0.595140] (test_package) StdoutLine: {'line': b"3: -  'i','n','t','e','r','n','a','l','[',\n"}
[0.595239] (test_package) StdoutLine: {'line': b"3: -  COMPILER_VERSION_INTERNAL,']','\\0'};\n"}
[0.595344] (test_package) StdoutLine: {'line': b"3: +  'c', 'o', 'm', 'p', 'i', 'l', 'e', 'r', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_',\n"}
[0.595457] (test_package) StdoutLine: {'line': b"3: +  'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', '[',\n"}
[0.595559] (test_package) StdoutLine: {'line': b"3: +  COMPILER_VERSION_INTERNAL, ']', '\\0'\n"}
[0.595658] (test_package) StdoutLine: {'line': b'3: +};\n'}
[0.595756] (test_package) StdoutLine: {'line': b'3: @@ -707 +712,2 @@\n'}
[0.595860] (test_package) StdoutLine: {'line': b'3: -char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";\n'}
[0.595962] (test_package) StdoutLine: {'line': b'3: +char const * info_version_internal =\n'}
[0.596062] (test_package) StdoutLine: {'line': b'3: +  "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";\n'}
[0.596178] (test_package) StdoutLine: {'line': b'3: @@ -714 +720 @@\n'}
[0.596279] (test_package) StdoutLine: {'line': b"3: -  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',\n"}
[0.596386] (test_package) StdoutLine: {'line': b"3: +  's', 'i', 'm', 'u', 'l', 'a', 't', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[',\n"}
[0.596488] (test_package) StdoutLine: {'line': b'3: @@ -719 +725 @@\n'}
[0.596596] (test_package) StdoutLine: {'line': b"3: -   '.', SIMULATE_VERSION_PATCH,\n"}
[0.596694] (test_package) StdoutLine: {'line': b"3: +  '.', SIMULATE_VERSION_PATCH,\n"}
[0.596788] (test_package) StdoutLine: {'line': b'3: @@ -721 +727 @@\n'}
[0.596884] (test_package) StdoutLine: {'line': b"3: -    '.', SIMULATE_VERSION_TWEAK,\n"}
[0.596992] (test_package) StdoutLine: {'line': b"3: +  '.', SIMULATE_VERSION_TWEAK,\n"}
[0.597110] (test_package) StdoutLine: {'line': b'3: @@ -725 +731,2 @@\n'}
[0.597209] (test_package) StdoutLine: {'line': b"3: -  ']','\\0'};\n"}
[0.597306] (test_package) StdoutLine: {'line': b"3: +  ']', '\\0'\n"}
[0.597417] (test_package) StdoutLine: {'line': b'3: +};\n'}
[0.597525] (test_package) StdoutLine: {'line': b'3: @@ -732,3 +739,2 @@\n'}
[0.597625] (test_package) StdoutLine: {'line': b'3: -char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";\n'}
[0.597724] (test_package) StdoutLine: {'line': b'3: -char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";\n'}
[0.597825] (test_package) StdoutLine: {'line': b'3: -\n'}
[0.597925] (test_package) StdoutLine: {'line': b'3: +char const * info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";\n'}
[0.598031] (test_package) StdoutLine: {'line': b'3: +char const * info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";\n'}
[0.598131] (test_package) StdoutLine: {'line': b'3: @@ -754 +760 @@\n'}
[0.598229] (test_package) StdoutLine: {'line': b'3: -const char* info_language_standard_default =\n'}
[0.598330] (test_package) StdoutLine: {'line': b'3: +const char * info_language_standard_default =\n'}
[0.598440] (test_package) StdoutLine: {'line': b'3: @@ -757 +763 @@\n'}
[0.598546] (test_package) StdoutLine: {'line': b'3: -const char* info_language_extensions_default = "INFO" ":" "extensions_default["\n'}
[0.598647] (test_package) StdoutLine: {'line': b'3: +const char * info_language_extensions_default = "INFO" ":" "extensions_default["\n'}
[0.598746] (test_package) StdoutLine: {'line': b'3: @@ -759,2 +765,2 @@\n'}
[0.598846] (test_package) StdoutLine: {'line': b'3: -#if (defined(__clang__) || defined(__GNUC__) ||                               \\\n'}
[0.598944] (test_package) StdoutLine: {'line': b'3: -     defined(__TI_COMPILER_VERSION__)) &&                                     \\\n'}
[0.599044] (test_package) StdoutLine: {'line': b'3: +#if (defined(__clang__) || defined(__GNUC__) || \\\n'}
[0.599143] (test_package) StdoutLine: {'line': b'3: +  defined(__TI_COMPILER_VERSION__)) && \\\n'}
[0.599243] (test_package) StdoutLine: {'line': b'3: @@ -766 +772 @@\n'}
[0.599350] (test_package) StdoutLine: {'line': b'3: -"]";\n'}
[0.599460] (test_package) StdoutLine: {'line': b'3: +  "]";\n'}
[0.599559] (test_package) StdoutLine: {'line': b'3: @@ -774 +780 @@\n'}
[0.599656] (test_package) StdoutLine: {'line': b'3: -int main(argc, argv) int argc; char *argv[];\n'}
[0.599755] (test_package) StdoutLine: {'line': b'3: +int main(argc, argv) int argc; char * argv[];\n'}
[0.599853] (test_package) StdoutLine: {'line': b'3: @@ -776 +782 @@\n'}
[0.599953] (test_package) StdoutLine: {'line': b'3: -int main(int argc, char* argv[])\n'}
[0.600063] (test_package) StdoutLine: {'line': b'3: +int main(int argc, char * argv[])\n'}
[0.600164] (test_package) StdoutLine: {'line': b'3: \n'}
[0.600259] (-) TimerEvent: {}
[0.600406] (test_package) StdoutLine: {'line': b"3: Code style divergence in file 'build/test_package/CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp':\n"}
[0.600531] (test_package) StdoutLine: {'line': b'3: \n'}
[0.600633] (test_package) StdoutLine: {'line': b'3: --- build/test_package/CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp\n'}
[0.600736] (test_package) StdoutLine: {'line': b'3: +++ build/test_package/CMakeFiles/3.22.1/CompilerIdCXX/CMakeCXXCompilerId.cpp.uncrustify\n'}
[0.600842] (test_package) StdoutLine: {'line': b'3: @@ -20 +20 @@\n'}
[0.600942] (test_package) StdoutLine: {'line': b'3: -  /* __COMO_VERSION__ = VRR */\n'}
[0.601060] (test_package) StdoutLine: {'line': b'3: +/* __COMO_VERSION__ = VRR */\n'}
[0.601166] (test_package) StdoutLine: {'line': b'3: @@ -32 +32 @@\n'}
[0.601272] (test_package) StdoutLine: {'line': b'3: -  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,\n'}
[0.601385] (test_package) StdoutLine: {'line': b'3: +/* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,\n'}
[0.601496] (test_package) StdoutLine: {'line': b'3: @@ -35,2 +35,2 @@\n'}
[0.601600] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)\n'}
[0.601703] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)\n'}
[0.601806] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER / 100)\n'}
[0.601907] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER / 10 % 10)\n'}
[0.602012] (test_package) StdoutLine: {'line': b'3: @@ -40 +40 @@\n'}
[0.602131] (test_package) StdoutLine: {'line': b'3: -#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)\n'}
[0.602230] (test_package) StdoutLine: {'line': b'3: +#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER % 10)\n'}
[0.602349] (test_package) StdoutLine: {'line': b'3: @@ -45 +45 @@\n'}
[0.602456] (test_package) StdoutLine: {'line': b'3: -   /* The third version component from --version is an update index,\n'}
[0.602556] (test_package) StdoutLine: {'line': b'3: +/* The third version component from --version is an update index,\n'}
[0.602654] (test_package) StdoutLine: {'line': b'3: @@ -50 +50 @@\n'}
[0.602753] (test_package) StdoutLine: {'line': b'3: -   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */\n'}
[0.602855] (test_package) StdoutLine: {'line': b'3: +/* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */\n'}
[0.602953] (test_package) StdoutLine: {'line': b'3: @@ -54 +54 @@\n'}
[0.603052] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.603150] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.603248] (test_package) StdoutLine: {'line': b'3: @@ -83,3 +83,3 @@\n'}
[0.603352] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)\n'}
[0.603463] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)\n'}
[0.603564] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)\n'}
[0.603664] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER / 100)\n'}
[0.603765] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER / 10 % 10)\n'}
[0.603863] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER % 10)\n'}
[0.603963] (test_package) StdoutLine: {'line': b'3: @@ -87,3 +87,3 @@\n'}
[0.604061] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)\n'}
[0.604161] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)\n'}
[0.604262] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)\n'}
[0.604365] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER / 10000)\n'}
[0.604484] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER / 100 % 100)\n'}
[0.604585] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER % 100)\n'}
[0.604686] (test_package) StdoutLine: {'line': b'3: @@ -92 +92 @@\n'}
[0.604791] (test_package) StdoutLine: {'line': b'3: -  /* _MSC_VER = VVRR */\n'}
[0.604896] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.604994] (test_package) StdoutLine: {'line': b'3: @@ -118,3 +118,3 @@\n'}
[0.605117] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)\n'}
[0.605222] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)\n'}
[0.605337] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)\n'}
[0.605457] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__ >> 24 & 0x00FF)\n'}
[0.605561] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__ >> 16 & 0x00FF)\n'}
[0.605664] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__ & 0xFFFF)\n'}
[0.605766] (test_package) StdoutLine: {'line': b'3: @@ -124,2 +124,2 @@\n'}
[0.605868] (test_package) StdoutLine: {'line': b'3: -  /* __BORLANDC__ = 0xVRR */\n'}
[0.605971] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)\n'}
[0.606087] (test_package) StdoutLine: {'line': b'3: +/* __BORLANDC__ = 0xVRR */\n'}
[0.606193] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__ >> 8)\n'}
[0.606294] (test_package) StdoutLine: {'line': b'3: @@ -130 +130 @@\n'}
[0.606411] (test_package) StdoutLine: {'line': b'3: -   /* __WATCOMC__ = VVRR */\n'}
[0.606525] (test_package) StdoutLine: {'line': b'3: +/* __WATCOMC__ = VVRR */\n'}
[0.606627] (test_package) StdoutLine: {'line': b'3: @@ -139 +139 @@\n'}
[0.606731] (test_package) StdoutLine: {'line': b'3: -   /* __WATCOMC__ = VVRP + 1100 */\n'}
[0.606832] (test_package) StdoutLine: {'line': b'3: +/* __WATCOMC__ = VVRP + 1100 */\n'}
[0.606935] (test_package) StdoutLine: {'line': b'3: @@ -149,4 +149,4 @@\n'}
[0.607041] (test_package) StdoutLine: {'line': b'3: -   /* __SUNPRO_CC = 0xVRRP */\n'}
[0.607156] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)\n'}
[0.607256] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)\n'}
[0.607359] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)\n'}
[0.607468] (test_package) StdoutLine: {'line': b'3: +/* __SUNPRO_CC = 0xVRRP */\n'}
[0.607566] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC >> 12)\n'}
[0.607664] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC >> 4 & 0xFF)\n'}
[0.607764] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC & 0xF)\n'}
[0.607866] (test_package) StdoutLine: {'line': b'3: @@ -154,4 +154,4 @@\n'}
[0.607965] (test_package) StdoutLine: {'line': b'3: -   /* __SUNPRO_CC = 0xVRP */\n'}
[0.608063] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)\n'}
[0.608188] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)\n'}
[0.608290] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)\n'}
[0.608404] (test_package) StdoutLine: {'line': b'3: +/* __SUNPRO_CC = 0xVRP */\n'}
[0.608510] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC >> 8)\n'}
[0.608613] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC >> 4 & 0xF)\n'}
[0.608719] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC & 0xF)\n'}
[0.608820] (test_package) StdoutLine: {'line': b'3: @@ -162,4 +162,4 @@\n'}
[0.608922] (test_package) StdoutLine: {'line': b'3: -  /* __HP_aCC = VVRRPP */\n'}
[0.609024] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)\n'}
[0.609143] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)\n'}
[0.609242] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)\n'}
[0.609344] (test_package) StdoutLine: {'line': b'3: +/* __HP_aCC = VVRRPP */\n'}
[0.609454] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__HP_aCC / 10000)\n'}
[0.609555] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__HP_aCC / 100 % 100)\n'}
[0.609655] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__HP_aCC % 100)\n'}
[0.609753] (test_package) StdoutLine: {'line': b'3: @@ -169,4 +169,4 @@\n'}
[0.609853] (test_package) StdoutLine: {'line': b'3: -  /* __DECCXX_VER = VVRRTPPPP */\n'}
[0.609951] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)\n'}
[0.610049] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)\n'}
[0.610150] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)\n'}
[0.610249] (test_package) StdoutLine: {'line': b'3: +/* __DECCXX_VER = VVRRTPPPP */\n'}
[0.610355] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER / 10000000)\n'}
[0.610465] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER / 100000 % 100)\n'}
[0.610565] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER % 10000)\n'}
[0.610673] (test_package) StdoutLine: {'line': b'3: @@ -176,4 +176,4 @@\n'}
[0.610773] (test_package) StdoutLine: {'line': b'3: -  /* __IBMCPP__ = VRP */\n'}
[0.610872] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)\n'}
[0.610974] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)\n'}
[0.611072] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)\n'}
[0.611174] (test_package) StdoutLine: {'line': b'3: +/* __IBMCPP__ = VRP */\n'}
[0.611273] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__ / 100)\n'}
[0.611382] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMCPP__ / 10 % 10)\n'}
[0.611488] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMCPP__ % 10)\n'}
[0.611586] (test_package) StdoutLine: {'line': b'3: @@ -191,4 +191,4 @@\n'}
[0.611685] (test_package) StdoutLine: {'line': b'3: -  /* __IBMCPP__ = VRP */\n'}
[0.611783] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)\n'}
[0.611890] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)\n'}
[0.611992] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)\n'}
[0.612092] (test_package) StdoutLine: {'line': b'3: +/* __IBMCPP__ = VRP */\n'}
[0.612191] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__ / 100)\n'}
[0.612289] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMCPP__ / 10 % 10)\n'}
[0.612399] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMCPP__ % 10)\n'}
[0.612503] (test_package) StdoutLine: {'line': b'3: @@ -198,4 +198,4 @@\n'}
[0.612603] (test_package) StdoutLine: {'line': b'3: -  /* __IBMCPP__ = VRP */\n'}
[0.612701] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)\n'}
[0.612803] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)\n'}
[0.612903] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)\n'}
[0.613000] (test_package) StdoutLine: {'line': b'3: +/* __IBMCPP__ = VRP */\n'}
[0.613122] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__ / 100)\n'}
[0.613222] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__IBMCPP__ / 10 % 10)\n'}
[0.613325] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__IBMCPP__ % 10)\n'}
[0.613440] (test_package) StdoutLine: {'line': b'3: @@ -226,4 +226,4 @@\n'}
[0.613545] (test_package) StdoutLine: {'line': b'3: -  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */\n'}
[0.613651] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)\n'}
[0.613753] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)\n'}
[0.613857] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)\n'}
[0.613959] (test_package) StdoutLine: {'line': b'3: +/* __TI_COMPILER_VERSION__ = VVVRRRPPP */\n'}
[0.614062] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__ / 1000000)\n'}
[0.614165] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__ / 1000 % 1000)\n'}
[0.614268] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__ % 1000)\n'}
[0.614379] (test_package) StdoutLine: {'line': b'3: @@ -261 +261 @@\n'}
[0.614490] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)\n'}
[0.614612] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER % 10)\n'}
[0.614722] (test_package) StdoutLine: {'line': b'3: @@ -270,4 +270,4 @@\n'}
[0.614823] (test_package) StdoutLine: {'line': b'3: -  /* __ARMCC_VERSION = VRRPPPP */\n'}
[0.614931] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)\n'}
[0.615037] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)\n'}
[0.615140] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)\n'}
[0.615242] (test_package) StdoutLine: {'line': b'3: +/* __ARMCC_VERSION = VRRPPPP */\n'}
[0.615353] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION / 1000000)\n'}
[0.615468] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION / 10000 % 100)\n'}
[0.615572] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION % 10000)\n'}
[0.615676] (test_package) StdoutLine: {'line': b'3: @@ -275,4 +275,4 @@\n'}
[0.615781] (test_package) StdoutLine: {'line': b'3: -  /* __ARMCC_VERSION = VRPPPP */\n'}
[0.615886] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)\n'}
[0.615988] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)\n'}
[0.616092] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)\n'}
[0.616195] (test_package) StdoutLine: {'line': b'3: +/* __ARMCC_VERSION = VRPPPP */\n'}
[0.616296] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION / 100000)\n'}
[0.616411] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION / 10000 % 10)\n'}
[0.616517] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION % 10000)\n'}
[0.616621] (test_package) StdoutLine: {'line': b'3: @@ -291 +291 @@\n'}
[0.616723] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.616826] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.616928] (test_package) StdoutLine: {'line': b'3: @@ -299,3 +299,3 @@\n'}
[0.617032] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)\n'}
[0.617136] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)\n'}
[0.617239] (test_package) StdoutLine: {'line': b'3: -  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)\n'}
[0.617346] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION / 1000000)\n'}
[0.617459] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION / 10000 % 100)\n'}
[0.617564] (test_package) StdoutLine: {'line': b'3: +  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION % 10000)\n'}
[0.617667] (test_package) StdoutLine: {'line': b'3: @@ -313 +313 @@\n'}
[0.617770] (test_package) StdoutLine: {'line': b'3: -   /* _MSC_VER = VVRR */\n'}
[0.617874] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.617977] (test_package) StdoutLine: {'line': b'3: @@ -334 +334 @@\n'}
[0.618080] (test_package) StdoutLine: {'line': b'3: -  /* _MSC_VER = VVRR */\n'}
[0.618182] (test_package) StdoutLine: {'line': b'3: +/* _MSC_VER = VVRR */\n'}
[0.618286] (test_package) StdoutLine: {'line': b'3: @@ -339 +339 @@\n'}
[0.618399] (test_package) StdoutLine: {'line': b'3: -    /* _MSC_FULL_VER = VVRRPPPPP */\n'}
[0.618506] (test_package) StdoutLine: {'line': b'3: +/* _MSC_FULL_VER = VVRRPPPPP */\n'}
[0.618609] (test_package) StdoutLine: {'line': b'3: @@ -342 +342 @@\n'}
[0.618712] (test_package) StdoutLine: {'line': b'3: -    /* _MSC_FULL_VER = VVRRPPPP */\n'}
[0.618815] (test_package) StdoutLine: {'line': b'3: +/* _MSC_FULL_VER = VVRRPPPP */\n'}
[0.618931] (test_package) StdoutLine: {'line': b'3: @@ -350 +350,2 @@\n'}
[0.619034] (test_package) StdoutLine: {'line': b'3: -#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)\n'}
[0.619146] (test_package) StdoutLine: {'line': b'3: +#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || \\\n'}
[0.619250] (test_package) StdoutLine: {'line': b'3: +  defined(__ADSP21000__)\n'}
[0.619360] (test_package) StdoutLine: {'line': b'3: @@ -353,4 +354,4 @@\n'}
[0.619475] (test_package) StdoutLine: {'line': b'3: -  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */\n'}
[0.619579] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)\n'}
[0.619682] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)\n'}
[0.619784] (test_package) StdoutLine: {'line': b'3: -# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)\n'}
[0.619887] (test_package) StdoutLine: {'line': b'3: +/* __VISUALDSPVERSION__ = 0xVVRRPP00 */\n'}
[0.619990] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__ >> 24)\n'}
[0.620094] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__ >> 16 & 0xFF)\n'}
[0.620202] (test_package) StdoutLine: {'line': b'3: +# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__ >> 8 & 0xFF)\n'}
[0.620305] (test_package) StdoutLine: {'line': b'3: @@ -366 +367,3 @@\n'}
[0.620422] (test_package) StdoutLine: {'line': b'3: -# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))\n'}
[0.620532] (test_package) StdoutLine: {'line': b'3: +# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || \\\n'}
[0.620638] (test_package) StdoutLine: {'line': b'3: +  defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || \\\n'}
[0.620740] (test_package) StdoutLine: {'line': b'3: +  defined(__ICC8051__) || defined(__ICCSTM8__))\n'}
[0.620843] (test_package) StdoutLine: {'line': b'3: @@ -368 +371 @@\n'}
[0.620946] (test_package) StdoutLine: {'line': b'3: -#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))\n'}
[0.621052] (test_package) StdoutLine: {'line': b'3: +#  define COMPILER_VERSION_MINOR DEC((__VER__) -(((__VER__) / 100) * 100))\n'}
[0.621156] (test_package) StdoutLine: {'line': b'3: @@ -388 +391 @@\n'}
[0.621258] (test_package) StdoutLine: {'line': b'3: -char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";\n'}
[0.621367] (test_package) StdoutLine: {'line': b'3: +char const * info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";\n'}
[0.621481] (test_package) StdoutLine: {'line': b'3: @@ -390 +393 @@\n'}
[0.621583] (test_package) StdoutLine: {'line': b'3: -char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";\n'}
[0.621687] (test_package) StdoutLine: {'line': b'3: +char const * info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";\n'}
[0.621787] (test_package) StdoutLine: {'line': b'3: @@ -394 +397 @@\n'}
[0.621893] (test_package) StdoutLine: {'line': b'3: -char const* qnxnto = "INFO" ":" "qnxnto[]";\n'}
[0.621995] (test_package) StdoutLine: {'line': b'3: +char const * qnxnto = "INFO" ":" "qnxnto[]";\n'}
[0.622098] (test_package) StdoutLine: {'line': b'3: @@ -398 +401 @@\n'}
[0.622201] (test_package) StdoutLine: {'line': b'3: -char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";\n'}
[0.622303] (test_package) StdoutLine: {'line': b'3: +char const * info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";\n'}
[0.622434] (test_package) StdoutLine: {'line': b'3: @@ -641,9 +644,9 @@\n'}
[0.622541] (test_package) StdoutLine: {'line': b'3: -#define DEC(n)                   \\\n'}
[0.622642] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10000000)%10)), \\\n"}
[0.622754] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 1000000)%10)),  \\\n"}
[0.622855] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 100000)%10)),   \\\n"}
[0.622958] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10000)%10)),    \\\n"}
[0.623079] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 1000)%10)),     \\\n"}
[0.623186] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 100)%10)),      \\\n"}
[0.623292] (test_package) StdoutLine: {'line': b"3: -  ('0' + (((n) / 10)%10)),       \\\n"}
[0.623412] (test_package) StdoutLine: {'line': b"3: -  ('0' +  ((n) % 10))\n"}
[0.623522] (test_package) StdoutLine: {'line': b'3: +#define DEC(n) \\\n'}
[0.623630] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10000000) % 10)), \\\n"}
[0.623736] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 1000000) % 10)), \\\n"}
[0.623842] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 100000) % 10)), \\\n"}
[0.623949] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10000) % 10)), \\\n"}
[0.624055] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 1000) % 10)), \\\n"}
[0.624160] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 100) % 10)), \\\n"}
[0.624266] (test_package) StdoutLine: {'line': b"3: +  ('0' + (((n) / 10) % 10)), \\\n"}
[0.624381] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) % 10))\n"}
[0.624495] (test_package) StdoutLine: {'line': b'3: @@ -652,9 +655,9 @@\n'}
[0.624603] (test_package) StdoutLine: {'line': b'3: -#define HEX(n)             \\\n'}
[0.624710] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>28 & 0xF)), \\\n"}
[0.624815] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>24 & 0xF)), \\\n"}
[0.624925] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>20 & 0xF)), \\\n"}
[0.625039] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>16 & 0xF)), \\\n"}
[0.625161] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>12 & 0xF)), \\\n"}
[0.625263] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>8  & 0xF)), \\\n"}
[0.625372] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)>>4  & 0xF)), \\\n"}
[0.625487] (test_package) StdoutLine: {'line': b"3: -  ('0' + ((n)     & 0xF))\n"}
[0.625593] (test_package) StdoutLine: {'line': b'3: +#define HEX(n) \\\n'}
[0.625696] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 28 & 0xF)), \\\n"}
[0.625799] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 24 & 0xF)), \\\n"}
[0.625903] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 20 & 0xF)), \\\n"}
[0.626005] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 16 & 0xF)), \\\n"}
[0.626129] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 12 & 0xF)), \\\n"}
[0.626235] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 8 & 0xF)), \\\n"}
[0.626347] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) >> 4 & 0xF)), \\\n"}
[0.626467] (test_package) StdoutLine: {'line': b"3: +  ('0' + ((n) & 0xF))\n"}
[0.626576] (test_package) StdoutLine: {'line': b'3: @@ -664 +667 @@\n'}
[0.626684] (test_package) StdoutLine: {'line': b'3: -char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";\n'}
[0.626812] (test_package) StdoutLine: {'line': b'3: +char const * info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";\n'}
[0.626925] (test_package) StdoutLine: {'line': b'3: @@ -670 +673 @@\n'}
[0.627034] (test_package) StdoutLine: {'line': b"3: -  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',\n"}
[0.627157] (test_package) StdoutLine: {'line': b"3: +  'c', 'o', 'm', 'p', 'i', 'l', 'e', 'r', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[',\n"}
[0.627264] (test_package) StdoutLine: {'line': b'3: @@ -675 +678 @@\n'}
[0.627385] (test_package) StdoutLine: {'line': b"3: -   '.', COMPILER_VERSION_PATCH,\n"}
[0.627498] (test_package) StdoutLine: {'line': b"3: +  '.', COMPILER_VERSION_PATCH,\n"}
[0.627603] (test_package) StdoutLine: {'line': b'3: @@ -677 +680 @@\n'}
[0.627717] (test_package) StdoutLine: {'line': b"3: -    '.', COMPILER_VERSION_TWEAK,\n"}
[0.627825] (test_package) StdoutLine: {'line': b"3: +  '.', COMPILER_VERSION_TWEAK,\n"}
[0.627931] (test_package) StdoutLine: {'line': b'3: @@ -681 +684 @@\n'}
[0.628034] (test_package) StdoutLine: {'line': b"3: -  ']','\\0'};\n"}
[0.628160] (test_package) StdoutLine: {'line': b"3: +  ']', '\\0'};\n"}
[0.628265] (test_package) StdoutLine: {'line': b'3: @@ -688,3 +691,3 @@\n'}
[0.628384] (test_package) StdoutLine: {'line': b"3: -  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',\n"}
[0.628501] (test_package) StdoutLine: {'line': b"3: -  'i','n','t','e','r','n','a','l','[',\n"}
[0.628607] (test_package) StdoutLine: {'line': b"3: -  COMPILER_VERSION_INTERNAL,']','\\0'};\n"}
[0.628718] (test_package) StdoutLine: {'line': b"3: +  'c', 'o', 'm', 'p', 'i', 'l', 'e', 'r', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_',\n"}
[0.628825] (test_package) StdoutLine: {'line': b"3: +  'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', '[',\n"}
[0.628931] (test_package) StdoutLine: {'line': b"3: +  COMPILER_VERSION_INTERNAL, ']', '\\0'};\n"}
[0.629036] (test_package) StdoutLine: {'line': b'3: @@ -692 +695,2 @@\n'}
[0.629160] (test_package) StdoutLine: {'line': b'3: -char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";\n'}
[0.629266] (test_package) StdoutLine: {'line': b'3: +char const * info_version_internal =\n'}
[0.629376] (test_package) StdoutLine: {'line': b'3: +  "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";\n'}
[0.629489] (test_package) StdoutLine: {'line': b'3: @@ -699 +703 @@\n'}
[0.629594] (test_package) StdoutLine: {'line': b"3: -  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',\n"}
[0.629697] (test_package) StdoutLine: {'line': b"3: +  's', 'i', 'm', 'u', 'l', 'a', 't', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[',\n"}
[0.629801] (test_package) StdoutLine: {'line': b'3: @@ -704 +708 @@\n'}
[0.629903] (test_package) StdoutLine: {'line': b"3: -   '.', SIMULATE_VERSION_PATCH,\n"}
[0.630007] (test_package) StdoutLine: {'line': b"3: +  '.', SIMULATE_VERSION_PATCH,\n"}
[0.630108] (test_package) StdoutLine: {'line': b'3: @@ -706 +710 @@\n'}
[0.630211] (test_package) StdoutLine: {'line': b"3: -    '.', SIMULATE_VERSION_TWEAK,\n"}
[0.630312] (test_package) StdoutLine: {'line': b"3: +  '.', SIMULATE_VERSION_TWEAK,\n"}
[0.630431] (test_package) StdoutLine: {'line': b'3: @@ -710 +714 @@\n'}
[0.630538] (test_package) StdoutLine: {'line': b"3: -  ']','\\0'};\n"}
[0.630641] (test_package) StdoutLine: {'line': b"3: +  ']', '\\0'};\n"}
[0.630744] (test_package) StdoutLine: {'line': b'3: @@ -717,3 +721,2 @@\n'}
[0.630847] (test_package) StdoutLine: {'line': b'3: -char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";\n'}
[0.630951] (test_package) StdoutLine: {'line': b'3: -char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";\n'}
[0.631054] (test_package) StdoutLine: {'line': b'3: -\n'}
[0.631156] (test_package) StdoutLine: {'line': b'3: +char const * info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";\n'}
[0.631262] (test_package) StdoutLine: {'line': b'3: +char const * info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";\n'}
[0.631371] (test_package) StdoutLine: {'line': b'3: @@ -738 +741 @@\n'}
[0.631485] (test_package) StdoutLine: {'line': b'3: -const char* info_language_standard_default = "INFO" ":" "standard_default["\n'}
[0.631592] (test_package) StdoutLine: {'line': b'3: +const char * info_language_standard_default = "INFO" ":" "standard_default["\n'}
[0.631695] (test_package) StdoutLine: {'line': b'3: @@ -752,3 +755,3 @@\n'}
[0.631799] (test_package) StdoutLine: {'line': b'3: -"]";\n'}
[0.631900] (test_package) StdoutLine: {'line': b'3: -\n'}
[0.632004] (test_package) StdoutLine: {'line': b'3: -const char* info_language_extensions_default = "INFO" ":" "extensions_default["\n'}
[0.632118] (test_package) StdoutLine: {'line': b'3: +  "]";\n'}
[0.632219] (test_package) StdoutLine: {'line': b'3: +\n'}
[0.632338] (test_package) StdoutLine: {'line': b'3: +const char * info_language_extensions_default = "INFO" ":" "extensions_default["\n'}
[0.632461] (test_package) StdoutLine: {'line': b'3: @@ -756,2 +759,2 @@\n'}
[0.632565] (test_package) StdoutLine: {'line': b'3: -#if (defined(__clang__) || defined(__GNUC__) ||                               \\\n'}
[0.632668] (test_package) StdoutLine: {'line': b'3: -     defined(__TI_COMPILER_VERSION__)) &&                                     \\\n'}
[0.632772] (test_package) StdoutLine: {'line': b'3: +#if (defined(__clang__) || defined(__GNUC__) || \\\n'}
[0.632877] (test_package) StdoutLine: {'line': b'3: +  defined(__TI_COMPILER_VERSION__)) && \\\n'}
[0.632982] (test_package) StdoutLine: {'line': b'3: @@ -763 +766 @@\n'}
[0.633105] (test_package) StdoutLine: {'line': b'3: -"]";\n'}
[0.633209] (test_package) StdoutLine: {'line': b'3: +  "]";\n'}
[0.633315] (test_package) StdoutLine: {'line': b'3: @@ -767 +770 @@\n'}
[0.633434] (test_package) StdoutLine: {'line': b'3: -int main(int argc, char* argv[])\n'}
[0.633544] (test_package) StdoutLine: {'line': b'3: +int main(int argc, char * argv[])\n'}
[0.633651] (test_package) StdoutLine: {'line': b'3: \n'}
[0.633756] (test_package) StdoutLine: {'line': b'3: 2 files with code style divergence\n'}
[0.633880] (test_package) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[0.633987] (test_package) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/uncrustify.xunit.xml'\n"}
[0.634112] (test_package) StdoutLine: {'line': b'3/4 Test #3: uncrustify .......................***Failed    0.24 sec\n'}
[0.634215] (test_package) StdoutLine: {'line': b'test 4\n'}
[0.634317] (test_package) StdoutLine: {'line': b'    Start 4: xmllint\n'}
[0.634435] (test_package) StdoutLine: {'line': b'\n'}
[0.634540] (test_package) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/xmllint.xunit.xml" "--package-name" "test_package" "--output-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/xmllint.xunit.xml"\n'}
[0.634666] (test_package) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[0.665965] (test_package) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package':\n"}
[0.666307] (test_package) StdoutLine: {'line': b'4:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/xmllint.xunit.xml\n'}
[0.700380] (-) TimerEvent: {}
[0.800680] (-) TimerEvent: {}
[0.901089] (-) TimerEvent: {}
[1.001376] (-) TimerEvent: {}
[1.101719] (-) TimerEvent: {}
[1.202011] (-) TimerEvent: {}
[1.302424] (-) TimerEvent: {}
[1.402762] (-) TimerEvent: {}
[1.503075] (-) TimerEvent: {}
[1.603434] (-) TimerEvent: {}
[1.703873] (-) TimerEvent: {}
[1.706979] (test_package) StdoutLine: {'line': b"4: File 'package.xml' is valid\n"}
[1.707159] (test_package) StdoutLine: {'line': b'4: \n'}
[1.707250] (test_package) StdoutLine: {'line': b"4: File 'build/test_package/test_results/test_package/cppcheck.xunit.xml' is valid\n"}
[1.707336] (test_package) StdoutLine: {'line': b'4: \n'}
[1.707434] (test_package) StdoutLine: {'line': b"4: File 'build/test_package/test_results/test_package/lint_cmake.xunit.xml' is valid\n"}
[1.707517] (test_package) StdoutLine: {'line': b'4: \n'}
[1.707599] (test_package) StdoutLine: {'line': b"4: File 'build/test_package/test_results/test_package/uncrustify.xunit.xml' is valid\n"}
[1.707678] (test_package) StdoutLine: {'line': b'4: \n'}
[1.707759] (test_package) StdoutLine: {'line': b"4: File 'build/test_package/test_results/test_package/xmllint.xunit.xml' is valid\n"}
[1.707849] (test_package) StdoutLine: {'line': b'4: \n'}
[1.707928] (test_package) StdoutLine: {'line': b"4: File 'install/test_package/share/test_package/package.xml' is valid\n"}
[1.708008] (test_package) StdoutLine: {'line': b'4: \n'}
[1.708088] (test_package) StdoutLine: {'line': b'4: No problems found\n'}
[1.719187] (test_package) StdoutLine: {'line': b'4: -- run_test.py: return code 0\n'}
[1.719344] (test_package) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/test_results/test_package/xmllint.xunit.xml'\n"}
[1.727119] (test_package) StdoutLine: {'line': b'4/4 Test #4: xmllint ..........................   Passed    1.14 sec\n'}
[1.727366] (test_package) StdoutLine: {'line': b'\n'}
[1.727446] (test_package) StdoutLine: {'line': b'50% tests passed\x1b[0;0m, \x1b[0;31m2 tests failed\x1b[0;0m out of 4\n'}
[1.727497] (test_package) StdoutLine: {'line': b'\n'}
[1.727544] (test_package) StdoutLine: {'line': b'Label Time Summary:\n'}
[1.727591] (test_package) StdoutLine: {'line': b'cppcheck      =   0.15 sec*proc (1 test)\n'}
[1.727636] (test_package) StdoutLine: {'line': b'lint_cmake    =   0.15 sec*proc (1 test)\n'}
[1.727682] (test_package) StdoutLine: {'line': b'linter        =   1.68 sec*proc (4 tests)\n'}
[1.727729] (test_package) StdoutLine: {'line': b'uncrustify    =   0.24 sec*proc (1 test)\n'}
[1.727774] (test_package) StdoutLine: {'line': b'xmllint       =   1.14 sec*proc (1 test)\n'}
[1.727819] (test_package) StdoutLine: {'line': b'\n'}
[1.727863] (test_package) StdoutLine: {'line': b'Total Test time (real) =   1.68 sec\n'}
[1.727909] (test_package) StdoutLine: {'line': b'\n'}
[1.727954] (test_package) StdoutLine: {'line': b'The following tests FAILED:\n'}
[1.728000] (test_package) StdoutLine: {'line': b'\t\x1b[0;31m  2 - lint_cmake (Failed)\x1b[0;0m\n'}
[1.728045] (test_package) StdoutLine: {'line': b'\t\x1b[0;31m  3 - uncrustify (Failed)\x1b[0;0m\n'}
[1.729932] (test_package) StderrLine: {'line': b'Errors while running CTest\n'}
[1.730109] (test_package) StderrLine: {'line': b'Output from these tests are in: /home/haniel/Projects/ROS-Mobile/Workspaces/test_package/build/test_package/Testing/Temporary/LastTest.log\n'}
[1.730201] (test_package) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[1.731623] (test_package) CommandEnded: {'returncode': 8}
[1.731982] (test_package) TestFailure: {'identifier': 'test_package'}
[1.732007] (test_package) JobEnded: {'identifier': 'test_package', 'rc': 0}
[1.732608] (-) EventReactorShutdown: {}
